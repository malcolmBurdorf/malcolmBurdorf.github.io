[{"content":"","permalink":"https://malcolmBurdorf.github.io/posts/my-third-post/","summary":"","title":"My Third Post"},{"content":"Hello. This is my second post.\n","permalink":"https://malcolmBurdorf.github.io/posts/my-second-post/","summary":"Hello. This is my second post.","title":"My Second Post"},{"content":"Hello. This is my first post. I would like to provide some information on how I created this website with Hugo and deployed it with Github Pages. Hopefully, this will be helpful for people like me, or my future self, since I just went through the process. This will be specifically for Windows, since that is the OS that I used.\nFirstly, this will basically be a summary of both the Hugo Quick Start page and The Simple Engineer\u0026rsquo;s video, so please look at those, if you would like more information.\n(btw markdown shortcode {{\u0026lt; youtube LIFvgrRxdt4 \u0026gt;}} would embed the video into this webpage)\nPrerequisites:   Install Git\n  Setup a Github account\n  Preferably, have Vim to edit files, otherwise Notepad\n  Step 1: Install Hugo I didn\u0026rsquo;t have any of the package management tools listed, so I tried Chocolatey, which didn\u0026rsquo;t work.\nI then tried Scoop, which did work, so install Scoop.\nI would make sure the execution policy is correct (to enable Powershell), by running this in the Powershell:\nSet-ExecutionPolicy RemoteSigned -scope CurrentUser I then ran this expression to install Scoop:\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') Now, we can install Hugo (the extended version) with Scoop:\nscoop install hugo-extended To verify it\u0026rsquo;s installed run:\nhugo version  Step 2: Create website repositories (Here, I used the method from The Simple Engineer to setup the sub modules. ) In order for our website to be hosted for others to see, we can use Github Pages. We will use one repository for storing our website content, and a different repository to deploy our website.\nGo to your github homepage, and create two new public repositories with README documents. The first one will be our storage repository, which I named \u0026lsquo;blog\u0026rsquo;. The second one will be our deployment repository, which will I named \u0026lsquo;malcolmBurdorf.github.io\u0026rsquo;.\nStep 3: Create the Website Git clone the storage repo and cd into it. I then ran:\nhugo new site mBblog to create the skeleton files for the site in the folder mBblog.\nStep 4: Pick a Theme The theme will dictate the look and flexibility of the website. You can choose one here. I ended up choosing PaperMod.\nGo to the theme\u0026rsquo;s github page, which you can usually get to by clicking download. Cd into blog/mBblog and git clone the theme into the theme folder. In my case, I used:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod You then need to set \u0026lsquo;theme = PaperMod\u0026rsquo; in your config file. You can do this manually (in Notepad or Vim) or run:\necho theme = \u0026quot;PaperMod\u0026quot; \u0026gt;\u0026gt; config.toml  Step 5: Add deployment repo as submodule You also need to change the baseURL. For Github Pages, this would be the name of the deployment repo. So in my case, ' baseURL = \u0026ldquo;https://malcolmBurdorf.github.io/\u0026quot; '\nNow, we want to use our deployment repo to house the static assets that our storage repo generates.\n","permalink":"https://malcolmBurdorf.github.io/posts/my-first-post/","summary":"Hello. This is my first post. I would like to provide some information on how I created this website with Hugo and deployed it with Github Pages. Hopefully, this will be helpful for people like me, or my future self, since I just went through the process. This will be specifically for Windows, since that is the OS that I used.\nFirstly, this will basically be a summary of both the Hugo Quick Start page and The Simple Engineer\u0026rsquo;s video, so please look at those, if you would like more information.","title":"My First Post"}]